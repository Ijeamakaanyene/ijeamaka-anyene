[
  {
    "path": "posts/2021-09-07-so-you-want-to-subdivide-a-rectangle/",
    "title": "So, you want to subdivide a rectangle",
    "description": "A brief explanation of subdivision.",
    "author": [
      {
        "name": "Ijeamaka Anyene",
        "url": "https://twitter.com/ijeamaka_a"
      }
    ],
    "date": "2021-09-07",
    "categories": [],
    "contents": "\nWhat is rectangle subdivision?\nIn my approach to rectangle subdivision, you take a rectangle (or a square) and then you split or subdivide it along its longest side. Then you take your two new shapes and you subdivide both of them along their longest sides again. With rectangle subdivision, you can make the subdivision even or uneven and make the line of subdivision straight or angled.\nüìì: this tutorial assumes knowledge of manipulating lists and using the packages dplyr and ggplot2. I am not asserting that this is the only or best way of approaching rectangle subdivision. This is just my personal approach.\nWhy aren‚Äôt you just giving us your code?\nI personally believe when people ask for my code, the true request is a desire to understand the approach that gave rise to my end product. Having my code just helps you recreate my work. Getting an understanding of how I approach polygon subdivision means you can implement or modify my approach in a way that best fits your needs.\nSet up\nTo follow along with this post, you will need two packages: {dplyr} to create and manipulate your data and {ggplot2} to visualize the output. So lets load our libraries.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\nI like to start with a nice decent sized rectangle and I create it using a tibble like so:\n\n\nrectangle = tibble(\n  x = c(1, 150, 150, 1),\n  y = c(1, 1, 125, 125)\n)\n\n\n\n\n\n\nFind the vertices\nIn order to subdivide your rectangle, you need to know the location of its vertices. In this post, I will refer to the vertices of each rectangle as x1-x4 and y1-y4. These vertices are named counterclockwise, starting from the bottom left. For example, x1 in the rectangle is located at (x = 1, y = 1) and x2 is located at (x = 150, y = 1).\n\n\n\nIn order to quickly pull and access the vertices of each rectangle - I like to use a function I created called get_vertices(). This function takes in a dataframe that has a column x and a column y and then pulls the values from the dataframe into the relevent vertices variable within a list. This function works partially because I always create the rectangle dataframe in the order I discussed before, i.e. x1 is always the first item in the x column and so forth.\n\n\nget_vertices = function(df){\n  \n  vertices = list(\n    x1 = df$x[1],\n    y1 = df$y[1],\n    x2 = df$x[2],\n    y2 = df$y[2],\n    x3 = df$x[3],\n    y3 = df$y[3],\n    x4 = df$x[4],\n    y4 = df$y[4]\n    \n  )\n  \n  return(vertices)\n}\n\n\n\nSo lets apply get_vertices() to our initial rectangle dataframe to create a list of all the vertices.\n\n\nvertices = rectangle %>%\n  get_vertices()\n\nvertices\n\n\n$x1\n[1] 1\n\n$y1\n[1] 1\n\n$x2\n[1] 150\n\n$y2\n[1] 1\n\n$x3\n[1] 150\n\n$y3\n[1] 125\n\n$x4\n[1] 1\n\n$y4\n[1] 125\n\nSubdivide the rectangle\nIn this example, we will do even subdivision which means that we will split our rectangle exactly in half. In this approach when we subdivide our rectangles, we want to do it along its longest side. This maximizes the amount of subdivisions you can do before your shapes become too small. In this case, the longest side is the horizontal width of the rectangle or the ‚Äúx side‚Äù. You can confirm the longest side by subtracting the vertices.\n\n\n# Determines length of \"x side\"\nabs(vertices$x2 - vertices$x1)\n\n\n[1] 149\n\n# Determines length of \"y side\"\nabs(vertices$y3 - vertices$y2)\n\n\n[1] 124\n\nüí°: you should use x2 and x1 to determine the length of x and y3 and y2 to determine the length of y. This is because based on how we defined the y vertices above, y1 is equal to y2 and y4 is equal to y3. See below!\n\n\nvertices$y1 == vertices$y2\n\n\n[1] TRUE\n\nvertices$y3 == vertices$y4\n\n\n[1] TRUE\n\nSince we are splitting our rectangle exactly in half, we need to find the midpoint between x1 and x2. The best way to do so is to use the midpoint formula: \\[ (x, y) = (x_1 + x_2)/ 2 , (y_1 + y_2)/2\\]\nBecause we only want the midpoint for the x coordinates for this instance (because the x is the longest side), we can simplify the formula and only use the following:\n\n\nmidpoint = (vertices$x1 + vertices$x2) / 2\n\n\n\nSo now we have an additional coordinate in our rectangle available to us. We have x1-x4, y1-y4, and the midpoint of x. Lets visualize it! Below is our original rectangle, but now the location of the midpoint is labeled.\n\n\n\nMy personal approach to subdivision is a ‚Äúfind and replace‚Äù approach. There are other approaches but this best fits my mental model regarding shapes.\nThe above rectangle needs to be split into two rectangles using the midpoint as a new vertex. Therefore, the leftmost rectangle new coordinates will be (going counterclockwise): 1) (x1, y1), 2) (midpoint, y2), 3) (midpoint, y3), 4) (x4, y4). The y vertices do not need to change - but the x2 and x3 vertices need to be updated to the midpoint.\nThen the rightmost rectangle‚Äôs new coordinates will be: 1) (midpoint, y1), 2) (x2, y2), 3) (x3, y3), and 4) (midpoint, y4)\nI do so by creating a new dataframe for the rectangles using the coordinates as laid out above.\n\n\nnew_rectangle = list()\n\n# LEFTMOST RECTANGLE\nnew_rectangle[[1]] = tibble(\n  x = c(vertices$x1, midpoint, midpoint, vertices$x4),\n  y = c(vertices$y1, vertices$y2, vertices$y3, vertices$y4),\n  group = LETTERS[1]\n)\n\n# RIGHTMOST RECTANGLE\nnew_rectangle[[2]] = tibble(\n  x = c(midpoint, vertices$x2, vertices$x3, midpoint),\n  y = c(vertices$y1, vertices$y2, vertices$y3, vertices$y4),\n  group = LETTERS[2]\n)\n\n# Using bind_rows() to combine into a dataframe\nfinal_rectangles = bind_rows(new_rectangle)\n\n\n\nüí°: When you have a dataframe with multiple polygons, the way to tell ggplot2 to distinguish between them is to use a group variable. The group variable lets ggplot2 know, these set of coordinates are part of group A and then these other set of coordinates are part of group B, and so forth. I like to use the LETTERS vector that comes with base R for my groups.\nGaze upon your new rectangles\nSo our new data frame should contain the x, y vertices for two rectangles and they each should have their own group (group A and group B).\n\nx\ny\ngroup\n1.0\n1\nA\n75.5\n1\nA\n75.5\n125\nA\n1.0\n125\nA\n75.5\n1\nB\n150.0\n1\nB\n150.0\n125\nB\n75.5\n125\nB\n\nThis dataframe when used in geom_polygon() allows us to have an output of our two new rectangles.\n\n\nggplot() +\n  geom_polygon(data = final_rectangles,\n               aes(x = x, y = y, \n                   group = group),\n               size = 2,\n               fill = NA,\n               color = \"black\") +\n  coord_equal()\n\n\n\n\nEt voila ‚ú®! You then repeat the above process for as many subdivision iterations as you would want. I personally have all of the above in a series of functions that allow me to continue to subdivide the rectangle, until I reach the number of desired iterations. Happy subdividing!\n\n\n\n",
    "preview": "posts/2021-09-07-so-you-want-to-subdivide-a-rectangle/subdivision_space_moody_blue_0036.png",
    "last_modified": "2021-09-07T18:16:43-07:00",
    "input_file": {},
    "preview_width": 4200,
    "preview_height": 3000
  },
  {
    "path": "posts/2021-01-14-art-ggplot-exploring-radial-visualizations/",
    "title": "aRt + ggplot: exploring radial visualizations",
    "description": "Computational art techniques can inform and spice up your data visualizations. A presentation for R-Ladies Johannesburg & Tunis (Jan 2021) and R-Ladies Santa Barbara (April 2021).",
    "author": [
      {
        "name": "Ijeamaka Anyene",
        "url": "https://twitter.com/ijeamaka_a"
      }
    ],
    "date": "2021-01-14",
    "categories": [
      "computational art",
      "presentation"
    ],
    "contents": "\naRt + ggplot: exploring radial visualizations\n\n.shareagain-bar {\n--shareagain-foreground: rgb(255, 255, 255);\n--shareagain-background: rgba(0, 0, 0, 0.5);\n--shareagain-facebook: none;\n--shareagain-linkedin: none;\n--shareagain-pinterest: none;\n--shareagain-pocket: none;\n--shareagain-reddit: none;\n}\n\nfitvids('.shareagain', {players: 'iframe'});\n\nEvent: R-Ladies Johannesburg & Tunis Joint MeetupDate: January 14th, 2021\nEvent: R-Ladies Santa Barbara Date: April 14th, 2021YouTube RecordingGithub Source Code\n\n\n\n",
    "preview": "posts/2021-01-14-art-ggplot-exploring-radial-visualizations/cover_image.png",
    "last_modified": "2021-04-17T01:15:03-07:00",
    "input_file": {},
    "preview_width": 2799,
    "preview_height": 1576
  },
  {
    "path": "posts/2021-01-04-radial-patterns-in-ggplot2/",
    "title": "Radial Patterns in ggplot2",
    "description": "A love letter to coord_polar() masquerading as a #rstats zine",
    "author": [
      {
        "name": "Ijeamaka Anyene",
        "url": "https://twitter.com/ijeamaka_a"
      }
    ],
    "date": "2021-01-04",
    "categories": [
      "portfolio",
      "computational art"
    ],
    "contents": "\n\n\n\nThis is my #rstats zine of 30 unique computational art pieces with accompanying code deep diving into radial objects. They are categorized by themes, but the order of completion is also indicated. All of these are created solely using {ggplot2} in R and the zine was created using the {xaringan} package.\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\n The art in this project is released under a CC BY-NC-SA 4.0 Creative Commons license. More details of usage can be found there. In summary, you can copy and redistribute and are free to build upon the material as long as you give me credit. However, you cannot use for commercial purposes without contacting me.\nAdditional InfoLink to PDF VersionSource Code\n\n\n\n",
    "preview": "posts/2021-01-04-radial-patterns-in-ggplot2/patterns_cover_3.png",
    "last_modified": "2021-01-03T15:56:19-08:00",
    "input_file": {},
    "preview_width": 5100,
    "preview_height": 2700
  },
  {
    "path": "posts/2020-10-22-workshop-an-introduction-to-ggplot2/",
    "title": "An Introduction to ggplot2",
    "description": "A workshop created for Kaiser Permanente's Division of Research Data Visualization Week.",
    "author": [
      {
        "name": "Ijeamaka Anyene",
        "url": "https://twitter.com/ijeamaka_a"
      }
    ],
    "date": "2020-10-22",
    "categories": [
      "presentation",
      "portfolio"
    ],
    "contents": "\nIntroduction to ggplot\n\n\n\n\n.shareagain-bar {\n--shareagain-foreground: rgb(255, 255, 255);\n--shareagain-background: rgba(0, 0, 0, 0.5);\n--shareagain-facebook: none;\n--shareagain-linkedin: none;\n--shareagain-pinterest: none;\n--shareagain-pocket: none;\n--shareagain-reddit: none;\n}\n\nfitvids('.shareagain', {players: 'iframe'});\n\nEvent: Data Visualization Week @ Kaiser Division of ResearchDate: October 22nd, 2020Github Source Code\n\n\n\n",
    "preview": "posts/2020-10-22-workshop-an-introduction-to-ggplot2/ggplot_presentation_slide_image.png",
    "last_modified": "2021-01-16T19:39:12-08:00",
    "input_file": {},
    "preview_width": 1891,
    "preview_height": 1064
  },
  {
    "path": "posts/2020-04-16-covid-19-visualization/",
    "title": "COVID-19 Visualization",
    "description": "An infectious disease natural history primer for the public",
    "author": [
      {
        "name": "Ijeamaka Anyene",
        "url": "https://twitter.com/ijeamaka_a"
      }
    ],
    "date": "2020-04-16",
    "categories": [
      "data visualization",
      "portfolio"
    ],
    "contents": "\nManaging the COVID-19 Pandemic Course\nU.C. Berkeley School of Public Health has an online, self-paced course to provide the public a comprehensive understanding of the COVID-19 pandemic.\nAs part of this course, Dr.¬†Sandi McCoy gave a lecture regarding proven interventions and and what we know works. To support this presentation, I created a visualization how the natural history of some of the most commonly known pathogens changes the mitigation and control strategies that are effective.\n\n\n\nThis course can be found here.\n\n\n\n",
    "preview": "https://raw.githubusercontent.com/mccoylab/covid_naturalhist_dataviz_2020/master/natural_history_infographic_v2.png",
    "last_modified": "2020-12-08T23:24:02-08:00",
    "input_file": {}
  }
]
